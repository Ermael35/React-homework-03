{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const __getTodos = createAsyncThunk(\"todos/getTodos\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/todos\", payload);\n    console.log(data);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const todos = createSlice({\n  name: \"todos\",\n  initialState: {\n    todos: [],\n    isLoading: false,\n    error: null\n  },\n  reducers: {\n    addTodo(state, action) {\n      state.todos.push(action.payload);\n      axios.post(\"http://localhost:3001/todos\", action.payload);\n    },\n\n    deleteTodo(state, action) {\n      let index = state.findIndex(todo => todo.id === action.payload);\n      state.todos.splice(index, 1);\n      axios.delete(`http://localhost:3001/todos/${action.payload}`);\n    },\n\n    updateTodo(state, action) {\n      let index = state.findIndex(todo => todo.id === action.payload.id);\n      state.todos.splice(index, 1, action.payload);\n      axios.patch(`http://localhost:3001/todos/${action.payload.id}`, action.payload);\n    },\n\n    extraReducers: {\n      [__getTodos.pending]: state => {\n        state.isLoading = true;\n        console.log(state); // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n      },\n      [__getTodos.fulfilled]: (state, action) => {\n        state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n        state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n      },\n      [__getTodos.rejected]: (state, action) => {\n        state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n        state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n      }\n    }\n  }\n});\nexport const {\n  addTodo,\n  deleteTodo,\n  updateTodo\n} = todos.actions;\nexport default todos;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","__getTodos","payload","thunkAPI","data","get","console","log","fulfillWithValue","error","rejectWithValue","todos","name","initialState","isLoading","reducers","addTodo","state","action","push","post","deleteTodo","index","findIndex","todo","id","splice","delete","updateTodo","patch","extraReducers","pending","fulfilled","rejected","actions"],"sources":["/Users/lenkokukyojulo/Desktop/sparta_react/com/React-homework-03/src/redux/modules/todo.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\"; \n\n\nexport const __getTodos = createAsyncThunk(\n  \"todos/getTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get(\"http://localhost:3001/todos\",payload);\n      console.log(data)\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\nexport const todos = createSlice({\n  name: \"todos\",\n  initialState:{\n    todos:[],\n    isLoading:false,\n    error:null,\n  \n},\n\n  reducers: {\n    addTodo(state, action) {\n      state.todos.push(action.payload);\n      axios.post(\"http://localhost:3001/todos\", action.payload );\n    },\n    deleteTodo(state, action) {\n      let index = state.findIndex((todo) => todo.id === action.payload);\n      state.todos.splice(index, 1);\n      axios.delete(`http://localhost:3001/todos/${action.payload}`);\n    },\n    updateTodo(state, action){\n      let  index = state.findIndex((todo) =>  todo.id === action.payload.id);\n      state.todos.splice(index, 1, action.payload);\n      axios.patch(`http://localhost:3001/todos/${action.payload.id}`, action.payload);\n    },\n\n     extraReducers: {\n    [__getTodos.pending]: (state) => {\n      state.isLoading = true;\n      console.log(state)\n      // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n  },\n});\n\nexport const { addTodo, deleteTodo, updateTodo } = todos.actions;\nexport default todos;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}