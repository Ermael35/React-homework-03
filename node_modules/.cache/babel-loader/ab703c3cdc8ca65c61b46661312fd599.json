{"ast":null,"code":"import axios from \"axios\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  error: null\n};\nexport const __getTodos = createAsyncThunk(\"todos/getTodos\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/todos\");\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const todos = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    addTodo(state, action) {\n      state.todos.push(action.payload);\n      axios.post(\"http://localhost:3001/todos\", action.payload);\n    },\n\n    deleteTodo(state, action) {\n      let index = state.findIndex(todo => todo.id === action.payload);\n      state.todos.splice(index, 1);\n      axios.delete(`http://localhost:3001/todos/${action.payload}`);\n    },\n\n    updateTodo(state, action) {\n      let index = state.findIndex(todo => todo.id === action.payload.id);\n      state.todos.splice(index, 1, action.payload);\n      axios.patch(`http://localhost:3001/todos/${action.payload.id}`, action.payload);\n    },\n\n    extraReducers: {\n      [__getTodos.pending]: (state, action) => {\n        state.isLoading = true;\n        console.log(action); // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n      },\n      [__getTodos.fulfilled]: (state, action) => {\n        state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n        state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n      },\n      [__getTodos.rejected]: (state, action) => {\n        state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n        state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n      }\n    }\n  }\n});\nexport const {\n  addTodo,\n  deleteTodo,\n  updateTodo\n} = todos.actions;\nexport default todos;","map":{"version":3,"names":["axios","createAsyncThunk","createSlice","initialState","todos","isLoading","error","__getTodos","payload","thunkAPI","data","get","fulfillWithValue","rejectWithValue","name","reducers","addTodo","state","action","push","post","deleteTodo","index","findIndex","todo","id","splice","delete","updateTodo","patch","extraReducers","pending","console","log","fulfilled","rejected","actions"],"sources":["/Users/lenkokukyojulo/Desktop/sparta_react/com/React-homework-03/src/redux/modules/todo.js"],"sourcesContent":["import axios from \"axios\"; \nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n\nconst initialState ={\n  \n    todos:[],\n    isLoading:false,\n    error:null,\n  \n}\nexport const __getTodos = createAsyncThunk(\n  \"todos/getTodos\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await axios.get(\"http://localhost:3001/todos\");\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\nexport const todos = createSlice({\n  name: \"todos\",\n  initialState,\n\n  reducers: {\n    addTodo(state, action) {\n      state.todos.push(action.payload);\n      axios.post(\"http://localhost:3001/todos\", action.payload );\n    },\n    deleteTodo(state, action) {\n      let index = state.findIndex((todo) => todo.id === action.payload);\n      state.todos.splice(index, 1);\n      axios.delete(`http://localhost:3001/todos/${action.payload}`);\n    },\n    updateTodo(state, action){\n      let  index = state.findIndex((todo) =>  todo.id === action.payload.id);\n      state.todos.splice(index, 1, action.payload);\n      axios.patch(`http://localhost:3001/todos/${action.payload.id}`, action.payload);\n    },\n\n     extraReducers: {\n    [__getTodos.pending]: (state,action) => {\n      state.isLoading = true;\n      console.log(action) // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n  },\n});\n\nexport const { addTodo, deleteTodo, updateTodo } = todos.actions;\nexport default todos;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAGA,MAAMC,YAAY,GAAE;EAEhBC,KAAK,EAAC,EAFU;EAGhBC,SAAS,EAAC,KAHM;EAIhBC,KAAK,EAAC;AAJU,CAApB;AAOA,OAAO,MAAMC,UAAU,GAAGN,gBAAgB,CACxC,gBADwC,EAExC,OAAOO,OAAP,EAAgBC,QAAhB,KAA6B;EAC3B,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,6BAAV,CAAnB;IACA,OAAOF,QAAQ,CAACG,gBAAT,CAA0BF,IAAI,CAACA,IAA/B,CAAP;EACD,CAHD,CAGE,OAAOJ,KAAP,EAAc;IACd,OAAOG,QAAQ,CAACI,eAAT,CAAyBP,KAAzB,CAAP;EACD;AACF,CATuC,CAAnC;AAWP,OAAO,MAAMF,KAAK,GAAGF,WAAW,CAAC;EAC/BY,IAAI,EAAE,OADyB;EAE/BX,YAF+B;EAI/BY,QAAQ,EAAE;IACRC,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;MACrBD,KAAK,CAACb,KAAN,CAAYe,IAAZ,CAAiBD,MAAM,CAACV,OAAxB;MACAR,KAAK,CAACoB,IAAN,CAAW,6BAAX,EAA0CF,MAAM,CAACV,OAAjD;IACD,CAJO;;IAKRa,UAAU,CAACJ,KAAD,EAAQC,MAAR,EAAgB;MACxB,IAAII,KAAK,GAAGL,KAAK,CAACM,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACV,OAA7C,CAAZ;MACAS,KAAK,CAACb,KAAN,CAAYsB,MAAZ,CAAmBJ,KAAnB,EAA0B,CAA1B;MACAtB,KAAK,CAAC2B,MAAN,CAAc,+BAA8BT,MAAM,CAACV,OAAQ,EAA3D;IACD,CATO;;IAURoB,UAAU,CAACX,KAAD,EAAQC,MAAR,EAAe;MACvB,IAAKI,KAAK,GAAGL,KAAK,CAACM,SAAN,CAAiBC,IAAD,IAAWA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACV,OAAP,CAAeiB,EAAtD,CAAb;MACAR,KAAK,CAACb,KAAN,CAAYsB,MAAZ,CAAmBJ,KAAnB,EAA0B,CAA1B,EAA6BJ,MAAM,CAACV,OAApC;MACAR,KAAK,CAAC6B,KAAN,CAAa,+BAA8BX,MAAM,CAACV,OAAP,CAAeiB,EAAG,EAA7D,EAAgEP,MAAM,CAACV,OAAvE;IACD,CAdO;;IAgBPsB,aAAa,EAAE;MAChB,CAACvB,UAAU,CAACwB,OAAZ,GAAsB,CAACd,KAAD,EAAOC,MAAP,KAAkB;QACtCD,KAAK,CAACZ,SAAN,GAAkB,IAAlB;QACA2B,OAAO,CAACC,GAAR,CAAYf,MAAZ,EAFsC,CAElB;MACrB,CAJe;MAKhB,CAACX,UAAU,CAAC2B,SAAZ,GAAwB,CAACjB,KAAD,EAAQC,MAAR,KAAmB;QACzCD,KAAK,CAACZ,SAAN,GAAkB,KAAlB,CADyC,CAChB;;QACzBY,KAAK,CAACb,KAAN,GAAcc,MAAM,CAACV,OAArB,CAFyC,CAEX;MAC/B,CARe;MAShB,CAACD,UAAU,CAAC4B,QAAZ,GAAuB,CAAClB,KAAD,EAAQC,MAAR,KAAmB;QACxCD,KAAK,CAACZ,SAAN,GAAkB,KAAlB,CADwC,CACf;;QACzBY,KAAK,CAACX,KAAN,GAAcY,MAAM,CAACV,OAArB,CAFwC,CAEV;MAC/B;IAZe;EAhBR;AAJqB,CAAD,CAAzB;AAqCP,OAAO,MAAM;EAAEQ,OAAF;EAAWK,UAAX;EAAuBO;AAAvB,IAAsCxB,KAAK,CAACgC,OAAlD;AACP,eAAehC,KAAf"},"metadata":{},"sourceType":"module"}