{"ast":null,"code":"import axios from \"axios\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const __addTodoThunk = createAsyncThunk(\"ADD_TODO\", async (arg, thunkAPI) => {\n  try {\n    const {\n      data\n    } = await axios.post(\"http://localhost:3001/todos\", arg);\n    return thunkAPI.fulfillWithValue(data);\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e);\n  }\n});\nexport const todos = createSlice({\n  name: \"todos\",\n  initialState: {\n    todos: [],\n    isLoading: false,\n    error: null\n  },\n  reducers: {\n    addTodo(state, action) {\n      state.todos.push(action.payload);\n    },\n\n    deleteTodo(state, action) {\n      let index = state.findIndex(todo => todo.id === action.payload);\n      state.todos.splice(index, 1);\n    },\n\n    updateTodo(state, action) {\n      let index = state.findIndex(todo => todo.id === action.payload.id);\n      state.todos.splice(index, 1, action.payload);\n    },\n\n    extraReducers: {\n      [__getTodos.pending]: (state, action) => {\n        state.isLoading = true;\n        console.log(action); // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n      },\n      [__getTodos.fulfilled]: (state, action) => {\n        state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n        state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n      },\n      [__getTodos.rejected]: (state, action) => {\n        state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n        state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n      }\n    }\n  }\n});\nexport const {\n  addTodo,\n  deleteTodo,\n  updateTodo\n} = todos.actions;\nexport default todos;","map":{"version":3,"names":["axios","createAsyncThunk","createSlice","__addTodoThunk","arg","thunkAPI","data","post","fulfillWithValue","e","rejectWithValue","todos","name","initialState","isLoading","error","reducers","addTodo","state","action","push","payload","deleteTodo","index","findIndex","todo","id","splice","updateTodo","extraReducers","__getTodos","pending","console","log","fulfilled","rejected","actions"],"sources":["/Users/lenkokukyojulo/Desktop/sparta_react/com/React-homework-03/src/redux/modules/todo.js"],"sourcesContent":["import axios from \"axios\"; \nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n\n\nexport const __addTodoThunk = createAsyncThunk(\n  \"ADD_TODO\",\n  async (arg, thunkAPI) => {\n    try {\n      const { data } = await axios.post(\"http://localhost:3001/todos\", arg);\n      return thunkAPI.fulfillWithValue(data);\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e);\n    }\n  }\n);\nexport const todos = createSlice({\n  name: \"todos\",\n  initialState:{\n    todos:[],\n    isLoading:false,\n    error:null,\n  \n},\n\n  reducers: {\n    addTodo(state, action) {\n      state.todos.push(action.payload);\n    },\n    deleteTodo(state, action) {\n      let index = state.findIndex((todo) => todo.id === action.payload);\n      state.todos.splice(index, 1);\n    },\n    updateTodo(state, action){\n      let  index = state.findIndex((todo) =>  todo.id === action.payload.id);\n      state.todos.splice(index, 1, action.payload);\n    },\n\n     extraReducers: {\n    [__getTodos.pending]: (state,action) => {\n      state.isLoading = true;\n      console.log(action) // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getTodos.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.todos = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getTodos.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n  },\n});\n\nexport const { addTodo, deleteTodo, updateTodo } = todos.actions;\nexport default todos;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAIA,OAAO,MAAMC,cAAc,GAAGF,gBAAgB,CAC5C,UAD4C,EAE5C,OAAOG,GAAP,EAAYC,QAAZ,KAAyB;EACvB,IAAI;IACF,MAAM;MAAEC;IAAF,IAAW,MAAMN,KAAK,CAACO,IAAN,CAAW,6BAAX,EAA0CH,GAA1C,CAAvB;IACA,OAAOC,QAAQ,CAACG,gBAAT,CAA0BF,IAA1B,CAAP;EACD,CAHD,CAGE,OAAOG,CAAP,EAAU;IACV,OAAOJ,QAAQ,CAACK,eAAT,CAAyBD,CAAzB,CAAP;EACD;AACF,CAT2C,CAAvC;AAWP,OAAO,MAAME,KAAK,GAAGT,WAAW,CAAC;EAC/BU,IAAI,EAAE,OADyB;EAE/BC,YAAY,EAAC;IACXF,KAAK,EAAC,EADK;IAEXG,SAAS,EAAC,KAFC;IAGXC,KAAK,EAAC;EAHK,CAFkB;EAS/BC,QAAQ,EAAE;IACRC,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;MACrBD,KAAK,CAACP,KAAN,CAAYS,IAAZ,CAAiBD,MAAM,CAACE,OAAxB;IACD,CAHO;;IAIRC,UAAU,CAACJ,KAAD,EAAQC,MAAR,EAAgB;MACxB,IAAII,KAAK,GAAGL,KAAK,CAACM,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACE,OAA7C,CAAZ;MACAH,KAAK,CAACP,KAAN,CAAYgB,MAAZ,CAAmBJ,KAAnB,EAA0B,CAA1B;IACD,CAPO;;IAQRK,UAAU,CAACV,KAAD,EAAQC,MAAR,EAAe;MACvB,IAAKI,KAAK,GAAGL,KAAK,CAACM,SAAN,CAAiBC,IAAD,IAAWA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACE,OAAP,CAAeK,EAAtD,CAAb;MACAR,KAAK,CAACP,KAAN,CAAYgB,MAAZ,CAAmBJ,KAAnB,EAA0B,CAA1B,EAA6BJ,MAAM,CAACE,OAApC;IACD,CAXO;;IAaPQ,aAAa,EAAE;MAChB,CAACC,UAAU,CAACC,OAAZ,GAAsB,CAACb,KAAD,EAAOC,MAAP,KAAkB;QACtCD,KAAK,CAACJ,SAAN,GAAkB,IAAlB;QACAkB,OAAO,CAACC,GAAR,CAAYd,MAAZ,EAFsC,CAElB;MACrB,CAJe;MAKhB,CAACW,UAAU,CAACI,SAAZ,GAAwB,CAAChB,KAAD,EAAQC,MAAR,KAAmB;QACzCD,KAAK,CAACJ,SAAN,GAAkB,KAAlB,CADyC,CAChB;;QACzBI,KAAK,CAACP,KAAN,GAAcQ,MAAM,CAACE,OAArB,CAFyC,CAEX;MAC/B,CARe;MAShB,CAACS,UAAU,CAACK,QAAZ,GAAuB,CAACjB,KAAD,EAAQC,MAAR,KAAmB;QACxCD,KAAK,CAACJ,SAAN,GAAkB,KAAlB,CADwC,CACf;;QACzBI,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACE,OAArB,CAFwC,CAEV;MAC/B;IAZe;EAbR;AATqB,CAAD,CAAzB;AAuCP,OAAO,MAAM;EAAEJ,OAAF;EAAWK,UAAX;EAAuBM;AAAvB,IAAsCjB,KAAK,CAACyB,OAAlD;AACP,eAAezB,KAAf"},"metadata":{},"sourceType":"module"}